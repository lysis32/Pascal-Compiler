%{
/***************************************************************/
/* Alec Ferguson                                               */
/*                                                             */
/* pascal.l - Version .80 for Pascal Compiler, developed with  */
/* assistance from Prof. James Canning of UMass Lowell.        */
/*                                                             */
/* Heavily inspired by code from J.P. Bennett's                */
/* Introduction to Compiling Techniques                        */
/*                                                             */
/* Last updated on 11 May 2012, 10:14 PM                       */
/*                                                             */
/***************************************************************/

#include "symbol.h"
#include "stdlib.h"
#include "stdio.h"
#include "stack.h"
#include "stack_interface.h"
#include "y.tab.h" /* generated by yacc */

#define token(x)    x

tableptr temp_ptr ;

%}

alpha             [a-zA-Z]
alphanum          [a-zA-Z0-9]
digit             [0-9]+
exponent          [eE][-+]?[0-9]+
comment           "{"[^{]*"}"
whitespace        [ \t]
newline           [\n\r]
string_literal    \"(\\.|[^\\"])*\"

%%


"<>"                                return token(NE) ;
"<="                                return token(LE) ;
">="                                return token(GE) ;

".."                                return token(DOTDOT) ;
":="                                return token(ASSIGN) ;

"PROGRAM"                           { return token(PROGRAM) ; }
                                      
"FUNCTION"                          return token(FUNCTION) ;
                                    
"PROCEDURE"                         return token(PROCEDURE) ;

"INTEGER"                           return token(INTEGER) ;
"REAL"                              return token(REAL) ;
"BEGIN"                             { return token(_BEGIN) ; }
"END"                               {  return token(END) ; }
"ARRAY"                             return token(ARRAY) ;
"IF"                                return token(IF) ;
"THEN"                              return token(THEN) ;
"ELSE"                              return token(ELSE) ;
"WHILE"                             return token(WHILE) ;
"DO"                                return token(DO) ;
"NOT"                               return token(NOT) ;
"VAR"                               return token(VAR) ;
"OF"                                return token(OF) ;
"PRINT"                             return token(PRINT) ;

"MOD"                               return token(MOD) ;
"DIV"                               return token(DIV) ;
"AND"                               return token(AND) ;

"OR"                                return token(OR) ;

{alpha}{alphanum}*                  {
                                      top_table( main_stack, &temp_ptr ) ;
                                      mkname( temp_ptr, yytext, T_UNDEF ) ;
                                      return token(ID) ; }

{digit}                             { mkconst( const_sym_tab, yytext, T_INT ) ;
                                      return token(NUM_INT) ; }

{digit}\.{digit}                    { mkconst( const_sym_tab, yytext, T_REAL ) ;
                                      return token(NUM_REAL) ; }

{string_literal}                    { top_table( main_stack, &temp_ptr ) ;
                                      mkname( temp_ptr, yytext, T_TEXT ) ;
                                      return token(STRING) ; 
                                    }

{whitespace}+                       ;

{comment}+                          ;

{newline}                           ++line_num ;

.                                   return token(yytext[0]) ;

%%
